{"version":3,"sources":["components/AddBlock.js","components/Link.js","components/Block.js","components/Difficulty.js","components/Blockchain.js","components/Subtitle.js","components/BlockchainInfo.js","App.js","serviceWorker.js","index.js"],"names":["AddBlock","data","onInputChange","onAddClick","Card","style","width","borderRadius","marginTop","bg","className","Body","InputGroup","Prepend","Text","id","FormControl","placeholder","aria-label","aria-describedby","name","onChange","value","Button","variant","onClick","Link","data-fa-transform","Block","index","timestamp","nonce","previousHash","hash","prevIsValid","isValid","onMineClick","miningInProgress","key","Title","Spinner","as","animation","size","role","aria-hidden","diff","props","Tooltip","Difficulty","input","React","createRef","Container","Form","Group","controlId","Label","OverlayTrigger","placement","delay","show","hide","overlay","Control","defaultValue","ref","this","current","Component","Blockchain","createGenesisBlock","block","mineBlock","isValidBlock","substring","difficulty","Array","join","calculateHash","sha256","JSON","stringify","toString","getDateString","date","Date","day","toDateString","slice","toTimeString","getLatestBlock","chain","state","length","createNewBlock","lastBlock","addInput","e","target","setState","i","Number","updateChain","start","difficultyChange","console","log","a","sleep","milliseconds","Promise","resolve","setTimeout","concat","push","fluid","blockchain","prevHash","Subtitle","BlockchainInfo","Accordion","defaultActiveKey","Header","Toggle","eventKey","Collapse","App","ButtonGroup","disabled","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83a3e75e.chunk.js","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport \"./Block.css\"\n\nconst AddBlock = ({ data, onInputChange, onAddClick }) => {\n    return (\n        <Card style={{ width:'30rem', borderRadius:'1rem', marginTop:'4rem' }} bg=\"light\" className=\"box text-center ml-auto mr-auto mb-5\">\n            <Card.Body>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Prepend>\n                        <InputGroup.Text id=\"basic-addon1\"><i className=\"far fa-file-alt\"></i></InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        placeholder=\"Input data here\"\n                        aria-label=\"Data\"\n                        aria-describedby=\"basic-addon1\"\n                        name='addBlock'\n                        onChange={onInputChange}\n                        value={data}\n                    />\n                </InputGroup>\n                <Button \n                    variant=\"warning\" \n                    className=\"mt-3\" \n                    name='addBlock' \n                    onClick={onAddClick}\n                >\n                    <i className=\"fas fa-plus mr-2\" style={{'pointerEvents':'none'}}></i>Add New Block\n                </Button>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default AddBlock;","import React from 'react';\nimport './Link.css';\n\nconst Link = () => {\n    return (\n        <div className=\"text-center text-muted\">\n            <i className=\"fas fa-link swing\" data-fa-transform=\"grow-6\"></i>\n        </div>\n    );\n}\n\nexport default Link;","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner'\nimport './Block.css';\n\nconst Block = ({ index, timestamp, data, nonce, previousHash, hash, prevIsValid, isValid, onInputChange, onMineClick, miningInProgress }) => {\n    return (\n        <Card key={miningInProgress} style={{ width: '46rem', borderRadius: '1rem' }} className=\"box ml-auto mr-auto\">\n            <Card.Body>\n                <Card.Title>\n                    <strong>{index === '0' ? 'Genesis Block' : 'Block #' + index}</strong>\n                    <small className=\"ml-2 text-muted timestamp\">generated on {timestamp}</small>\n                </Card.Title>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Prepend>\n                        <InputGroup.Text id=\"basic-addon1\"><i className=\"far fa-file-alt\"></i></InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        placeholder=\"Input data here\"\n                        aria-label=\"Data\"\n                        aria-describedby=\"basic-addon1\"\n                        name={index}\n                        onChange={onInputChange}\n                        value={data}\n                    />\n                </InputGroup>\n\n                <small className=\"mr-2\">NONCE</small><p className=\"d-inline text-secondary\">{nonce}</p>\n                <br />\n                <small className={\"mr-2\"}>PREV HASH</small><p className={\"d-inline \" + (prevIsValid ? \"text-success\" : \"text-danger\")}>{previousHash}</p>\n                <br />\n                <small className=\"mr-2\">HASH</small><p className={\"d-inline \" + (isValid ? \"text-success\" : \"text-danger\")}>{hash}</p>\n\n                <Button\n                    variant=\"info\"\n                    className=\"mt-3\"\n                    name={index}\n                    onClick={onMineClick}\n                >\n                    Mine Block\n                    {miningInProgress ?\n                        <Spinner\n                            as=\"span\"\n                            animation=\"border\"\n                            size=\"sm\"\n                            role=\"status\"\n                            aria-hidden=\"true\"\n                            className=\"ml-2 mb-1\"\n                        />\n                        :\n                        <i className=\"fas fa-hammer ml-2\" style={{ 'pointerEvents': 'none' }}></i>\n                    }\n                </Button>\n\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default Block;","import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\nconst diff = (props) => {\n    return (\n        <Tooltip id=\"tooltip\" {...props}>\n            The difficulty value indicates the number of preceding 0's a hash must have to be valid. The greater the number, the longer the computer will take to find the hash, or in other words, mine the block.\n        </Tooltip>\n    );\n}\n\nclass Difficulty extends Component {\n    constructor(props) {\n        super(props);\n        this.input = React.createRef(); \n    }\n\n    render() { \n        return (\n            <Container className=\"d-flex flex-column justify-content-center mb-4\">\n                <Form className=\"difficulty-form text-center\">\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                        <Form.Label>Select\n                            <OverlayTrigger\n                                placement=\"top\"\n                                delay={{ show: 150, hide: 300 }}\n                                overlay={diff}\n                            >\n                                <span className=\"text-info\"><strong> difficulty</strong></span>\n                            </OverlayTrigger>\n                        </Form.Label>\n                        <Form.Control \n                            as=\"select\" \n                            defaultValue=\"2\"\n                            ref={this.input} \n                            onChange={() => this.props.onChange(this.input.current.value)}\n                        >\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                            <option>5</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form>\n                <p className=\"small\"></p>\n            </Container>\n        );\n    }\n}\n \nexport default Difficulty;\n","import React from 'react';\nimport AddBlock from './AddBlock';\nimport Link from './Link';\nimport Container from 'react-bootstrap/Container';\nimport Block from './Block';\nimport sha256 from 'crypto-js/sha256';\nimport Difficulty from './Difficulty'\n\n\nclass Blockchain extends React.Component {\n    constructor() {\n        super();\n        this.difficulty = 2;\n        this.state = {\n            chain: [],\n            addInput: '',\n        };\n    }\n\n    componentDidMount() {\n        this.setState({ chain: [this.createGenesisBlock()] });\n    }\n\n    createGenesisBlock = () => {\n        const block = {\n            index: '0',\n            timestamp: \"Mon, Jun 15 2020 09:00:00 GMT\",\n            data: '',\n            nonce: 0,\n            previousHash: '0',\n            hash: '',\n            prevIsValid: true,\n            isValid: true,\n            miningInProgress: false,\n        };\n        this.mineBlock(block);\n        return block;\n    }\n\n    isValidBlock = (block) => {\n        return block.hash.substring(0, this.difficulty) === Array(this.difficulty + 1).join(\"0\");\n    }\n\n    calculateHash = (block) => {\n        return sha256(block.index + block.previousHash + block.timestamp + block.nonce + JSON.stringify(block.data)).toString();\n    }\n\n    getDateString = () => {\n        const date = new Date();\n        const day = date.toDateString();\n        return day.slice(0, 3) + \",\" + day.slice(3) + \" \" + date.toTimeString().slice(0, 12);\n    }\n\n    getLatestBlock = () => {\n        const { chain } = this.state;\n        return chain[chain.length - 1];\n    }\n\n    createNewBlock = () => {\n        const lastBlock = this.getLatestBlock();\n        const block = {\n            index: this.state.chain.length,\n            timestamp: this.getDateString(),\n            data: this.state.addInput,\n            nonce: 0,\n            previousHash: lastBlock.hash,\n            hash: '',\n            prevIsValid: lastBlock.isValid,\n            isValid: false,\n            miningInProgress: false,\n        };\n        this.mineBlock(block);\n        return block;\n    }\n\n    onInputChange = (e) => {\n        if (e.target.name === \"addBlock\") {\n            this.setState({\n                addInput: e.target.value\n            });\n        } else {\n            let chain = this.state.chain.slice();\n            const i = Number(e.target.name);\n            const block = chain[i];\n\n            block.data = e.target.value;\n            block.hash = this.calculateHash(block);\n            block.isValid = this.isValidBlock(block);\n\n            this.setState({\n                chain: this.updateChain(chain, i + 1, block.isValid)\n            });\n        }\n    }\n\n    updateChain = (chain, start, prevIsValid) => {\n        let block;\n        for (let i = start; i < chain.length; i++) {\n            block = chain[i];\n            if (i > 0) {\n                block.previousHash = chain[i - 1].hash;\n            }\n            block.hash = this.calculateHash(block);\n            block.prevIsValid = prevIsValid;\n            prevIsValid = this.isValidBlock(block);\n            block.isValid = prevIsValid;\n        }\n        return chain;\n    }\n\n    difficultyChange = (difficulty) => {\n        console.log(difficulty)\n        this.difficulty = Number(difficulty);\n        this.setState({\n            chain: this.updateChain(this.state.chain.slice(), 0, true)\n        });\n    }\n\n    onMineClick = (e) => {\n        const chain = this.state.chain.slice();\n        let i = Number(e.target.name);\n        let block = chain[i];\n\n\n        if (this.difficulty < 4) { //no loading visual necessary\n            this.mineBlock(block);\n            this.setState({\n                chain: this.updateChain(chain, i + 1, true)\n            });\n        } else {\n            block.miningInProgress = true;\n            \n            this.setState({ chain: chain }, async () => {\n                await this.sleep(10);   //loading state only shows if sleep is called\n                this.mineBlock(block)\n                block.miningInProgress = false;\n                this.setState({\n                    chain: this.updateChain(chain, i + 1, true)\n                });\n            });\n        }\n    }\n\n    sleep = (milliseconds) => {\n        return new Promise((resolve) => setTimeout(resolve, milliseconds));\n    };\n\n    mineBlock = (block) => {\n        block.nonce = 0;\n        block.hash = this.calculateHash(block);\n\n        while (!this.isValidBlock(block)) {\n            if (block.index > 0) {\n                block.timestamp = this.getDateString();\n            }\n            block.nonce++;\n            block.hash = this.calculateHash(block);\n        }\n        block.isValid = true;\n        return block;\n    }\n\n\n    onAddClick = () => {\n        this.setState({\n            chain: this.state.chain.concat(this.createNewBlock()),\n            addInput: '',\n        });\n    }\n\n    render() {\n        const chain = [];\n        for (const block of this.state.chain) {\n            chain.push(\n                <Block\n                    index={block.index}\n                    timestamp={block.timestamp}\n                    data={block.data}\n                    nonce={block.nonce}\n                    hash={block.hash}\n                    previousHash={block.previousHash}\n                    prevIsValid={block.prevIsValid}\n                    isValid={block.isValid}\n                    onInputChange={this.onInputChange}\n                    onMineClick={this.onMineClick}\n                    key={block.index}\n                    miningInProgress={block.miningInProgress}\n                />\n            )\n            if (block.index < this.state.chain.length - 1)\n                chain.push(<Link key={-(block.index + 1)} />);\n        }\n        console.log(this.state.chain[0] && this.state.chain[0].miningInProgress);\n\n        return (\n            <Container fluid className=\"d-flex flex-column justify-content-center\">\n                <Difficulty onChange={this.difficultyChange} />\n                {chain}\n                <AddBlock\n                    className=\"align-self-center\"\n                    onInputChange={this.onInputChange}\n                    onAddClick={this.onAddClick}\n                    data={this.state.addInput}\n                />\n            </Container>\n        );\n    }\n\n}\n\nexport default Blockchain;","import React from 'react';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport \"./Subtitle.css\"\n\nconst blockchain = (props) => {\n    return (\n        <Tooltip id=\"tooltip\" {...props}>\n            A distributed database that is used to maintain a continuously growing list of records, called blocks. \n            Anybody can add data to the chain, but because (in practice) all users have a copy of the chain, data can be verified based on majority consensus.\n        </Tooltip>\n    );\n}\n\nconst index = (props) => {\n    return (\n        <Tooltip id=\"tooltip\" {...props}>\n            This is the position of the block in the chain. The genesis block is the 0th block and subsequent blocks are numbered starting from 1.\n        </Tooltip>\n    );\n}\n\nconst timestamp = (props) => {\n    return (\n        <Tooltip id=\"tooltip\" {...props} >\n            The date and time a block was created.\n        </Tooltip>\n    );\n}\n\nconst data = (props) => {\n    return (\n        <Tooltip id=\"tooltip\" {...props} >\n            The data stored in a block, which in this case, is text. But for cryptocurrencies (e.g. bitcoin), their blockchain data is the transaction information between users. \n        </Tooltip>\n    );\n}\n\nconst prevHash = (props) => {\n    return (\n        <Tooltip id=\"tooltip\" {...props} >\n            The hash of the preceding block in the chain.\n        </Tooltip>\n    );\n}\n\nconst nonce = (props) => {\n    return (\n        <Tooltip id=\"tooltip\" {...props} >\n            The number you try to find in order to make the block have a valid hash.\n        </Tooltip>\n    );\n}\n\nconst hash = (props) => {\n    return (\n        <Tooltip id=\"tooltip\" {...props} >\n            The 'ID' of the block. It is simply a long string of characters generated by the SHA-256 hash function that is unique to each block's contents. Two unique blocks will always have a different hash and the same data will always have the same hash.\n        </Tooltip>\n    );\n}\n\nconst Subtitle = () => {\n    return (\n        <p className=\"subtitle\">\n            Welcome to my  \n            <OverlayTrigger\n                placement=\"top\"\n                delay={{ show: 150, hide: 300 }}\n                overlay={blockchain}\n            >\n                <span className=\"text-info\"><strong> blockchain </strong></span>\n            </OverlayTrigger>\n            demo! Enter some data and add a\n            <span className=\"text-warning\"><strong> new block</strong></span> to begin.\n          Each block has an \n          <OverlayTrigger\n                placement=\"top\"\n                delay={{ show: 150, hide: 300 }}\n                overlay={index}\n            >\n                <span className=\"text-info\"><strong> index</strong></span>\n            </OverlayTrigger>\n          ,\n            <OverlayTrigger\n                placement=\"bottom\"\n                delay={{ show: 150, hide: 300 }}\n                overlay={timestamp}\n            >\n                <span className=\"text-info\"><strong> timestamp</strong></span>\n            </OverlayTrigger>\n          ,\n          <OverlayTrigger\n                placement=\"bottom\"\n                delay={{ show: 150, hide: 300 }}\n                overlay={data}\n            >\n                <span className=\"text-info\"><strong> data</strong></span>\n            </OverlayTrigger>\n          ,\n          <OverlayTrigger\n                placement=\"bottom\"\n                delay={{ show: 150, hide: 300 }}\n                overlay={prevHash}\n            >\n                <span className=\"text-info\"><strong> previous hash</strong></span>\n            </OverlayTrigger>\n          , and\n          <OverlayTrigger\n                placement=\"bottom\"\n                delay={{ show: 150, hide: 300 }}\n                overlay={nonce}\n            >\n                <span className=\"text-info\"><strong> nonce</strong></span>\n            </OverlayTrigger>\n          , which are used to compute the block's\n          <OverlayTrigger\n                placement=\"bottom\"\n                delay={{ show: 150, hide: 300 }}\n                overlay={hash}\n            >\n                <span className=\"text-info\"><strong> hash</strong></span>\n            </OverlayTrigger>\n            . Hover above each item to learn more\n          about them!\n        </p>\n    );\n}\n\nexport default Subtitle;\n\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport './Block.css';\n\nconst BlockchainInfo = () => {\n    return (\n        <Container fluid className=\"blockchain-info\">\n          <Accordion defaultActiveKey=\"0\">\n              <Card className=\"border-custom text-center box\" style={{borderRadius:'1.5rem'}}>\n                <Card.Header>\n                  <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\" className=\"no-border\">\n                    <p className=\"text-dark no-border\">Bonus: Why should you care about blockchain?</p>\n                  </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey=\"1\">\n                  <Card.Body className=\"bg-custom\">\n                    <p className=\"text-secondary blockchain-info-text\">Blockchain is a way of storing data without the need for a centralized 3rd party\n                      as it is highly-resistant to tampering. As you are able to see in the demo, changing the data of a block renders the hash of it and\n                      all subsequent blocks invalid. In order to restore the validity of the chain, you must recompute the hash, or remine, all the invalid\n                      blocks. The time it takes to mine a single block increases drastically with the difficulty setting. This security is seen with Bitcoin, the most\n                      popular cryptocurrency today and a prominent user of blockchain technology. As of June 2020, the mining of a single block rewards 6.25 bitcoins\n                      and takes a $2000 consumer mining machine 24 hours to mine less than 0.001 bitcoins. In addition to added security and lack of a 3rd party authority,\n                      cryptocurrencies offer lower transaction fees, easier international trade, and other benefits. Other industres that are also using blockchain include the\n                      food industry, where IBM & Walmart are using the technology to improve food safety by tracking the origins of foods. The voting system can benefit from blockchain\n                      by preventing online voter fraud. In essense, blockchain effectively stores & verifies information and many implementations are cropping up in various modern industries.\n                    </p>\n                  </Card.Body>\n                </Accordion.Collapse>\n              </Card>\n            </Accordion>\n        </Container>\n    );\n}\n \nexport default BlockchainInfo;","import React from 'react';\nimport Blockchain from './components/Blockchain';\nimport Subtitle from './components/Subtitle';\nimport BlockchainInfo from './components/BlockchainInfo';\n\n\nimport Container from 'react-bootstrap/Container';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport './App.css';\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Container fluid className=\"d-flex flex-column justify-content-center no-pad\">\n        <header>\n          <h1 className=\"text-center\">Blockchain <i className=\"fas fa-cube text-info rotate\"></i></h1>\n        </header>\n        <Subtitle />\n        <Blockchain />\n        <BlockchainInfo />\n\n        <footer className=\"text-center\">\n          <ButtonGroup className=\"mt-3\">\n            <Button variant=\"secondary\" disabled><i className=\"far fa-heart\"></i></Button>\n            <Button href=\"https://github.com/phoebeli23/blockchain\" target=\"_blank\"><i className=\"fab fa-github\"></i></Button>\n            <Button variant=\"info\" href=\"https://www.linkedin.com/in/phoebeli503/\" target=\"_blank\"><i className=\"fab fa-linkedin\"></i></Button>\n          </ButtonGroup>\n        </footer>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}